Here's how you can create an API Gateway in Spring Boot with JWT Authentication, where the gateway validates the JWT token issued by the User Service before forwarding requests to other microservices.

Steps to Implement API Gateway with JWT Authentication
Set up Spring Cloud Gateway – Acts as a single entry point for all requests.
Implement JWT Token Filter – Intercepts requests and validates JWT tokens.
Configure Routes in API Gateway – Define routing rules to different microservices.
User Service – Issues JWT tokens upon successful authentication.
1. Add Dependencies
Add the required dependencies in pom.xml:

xml
Copy
Edit
<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Cloud Gateway -->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-gateway</artifactId>
    </dependency>

    <!-- JWT -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.11.5</version>
    </dependency>

    <!-- Lombok (For reducing boilerplate code) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>

    <!-- Spring Boot Starter Security -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
</dependencies>
2. Create JWT Utility Class
This class helps in generating and validating JWT tokens.

java
Copy
Edit
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.function.Function;

@Component
public class JwtUtil {
    private static final String SECRET_KEY = "mySecretKey";

    // Generate JWT Token
    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 hours expiry
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

    // Extract username from JWT
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    // Extract expiration date
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    // Extract Claims
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = Jwts.parser()
                .setSigningKey(SECRET_KEY)
                .parseClaimsJws(token)
                .getBody();
        return claimsResolver.apply(claims);
    }

    // Validate token
    public boolean validateToken(String token, String username) {
        return (extractUsername(token).equals(username) && !isTokenExpired(token));
    }

    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }
}
3. Create JWT Authentication Filter for API Gateway
This filter intercepts every request and validates the JWT before forwarding it to other microservices.

java
Copy
Edit
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

@Component
public class JwtAuthenticationFilter implements WebFilter {

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();

        // Allow authentication endpoints to bypass JWT validation
        if (request.getURI().getPath().contains("/auth/login") || request.getURI().getPath().contains("/auth/register")) {
            return chain.filter(exchange);
        }

        // Get JWT token from Authorization header
        if (!request.getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {
            return handleUnauthorized(exchange);
        }

        String authHeader = request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
        String token = authHeader != null && authHeader.startsWith("Bearer ") ? authHeader.substring(7) : null;

        if (token == null || !jwtUtil.validateToken(token, jwtUtil.extractUsername(token))) {
            return handleUnauthorized(exchange);
        }

        return chain.filter(exchange);
    }

    private Mono<Void> handleUnauthorized(ServerWebExchange exchange) {
        ServerHttpResponse response = exchange.getResponse();
        response.setStatusCode(org.springframework.http.HttpStatus.UNAUTHORIZED);
        return response.setComplete();
    }
}
4. Configure API Gateway to Route Requests
In application.yml, define routes for microservices.

yaml
Copy
Edit
spring:
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: http://localhost:8081/
          predicates:
            - Path=/user/**
        - id: notes-service
          uri: http://localhost:8082/
          predicates:
            - Path=/notes/**

server:
  port: 8080
5. Create API Gateway Main Class
This is the entry point of the API Gateway.

java
Copy
Edit
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class ApiGatewayApplication {
    public static void main(String[] args) {
        SpringApplication.run(ApiGatewayApplication.class, args);
    }

    @Bean
    public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {
        return builder.routes()
                .route("user-service", r -> r.path("/user/**").uri("http://localhost:8081"))
                .route("notes-service", r -> r.path("/notes/**").uri("http://localhost:8082"))
                .build();
    }
}
6. User Service for Token Generation
Example UserController in the User Service to generate JWT tokens.

java
Copy
Edit
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class AuthController {

    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestParam String username, @RequestParam String password) {
        // In real application, validate username and password
        if ("admin".equals(username) && "password".equals(password)) {
            String token = jwtUtil.generateToken(username);
            return ResponseEntity.ok(token);
        }
        return ResponseEntity.status(401).body("Invalid credentials");
    }
}
Testing the API Gateway with JWT Authentication
Login to get a token

bash
Copy
Edit
POST http://localhost:8081/auth/login
Body: { "username": "admin", "password": "password" }
Response:

json
Copy
Edit
{ "token": "eyJhbGciOiJIUzI1..." }
Call Notes API with Token

bash
Copy
Edit
GET http://localhost:8080/notes
Headers: Authorization: Bearer eyJhbGciOiJIUzI1...
If valid, request is forwarded to notes-service, otherwise 401 Unauthorized.

Conclusion
The User Service issues JWT tokens.
The API Gateway validates JWT tokens before routing requests.
The JWT Authentication Filter ensures only authenticated requests pass through.